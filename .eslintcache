[{"C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\index.js":"1","C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\reportWebVitals.js":"2","C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\App.js":"3","C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\components\\index.js":"4","C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\components\\Header\\Header.js":"5","C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\components\\Tetris\\Tetris.js":"6","C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\components\\Tetris\\assets\\emptyBoard.js":"7","C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\components\\Tetris\\assets\\borderFactory.js":"8","C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\components\\Tetris\\assets\\buildInWaiting.js":"9","C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\components\\Tetris\\assets\\cellRender.js":"10","C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\components\\Tetris\\useTetrisHooks\\useTetris.js":"11","C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\components\\Tetris\\useTetrisHooks\\usePcs.js":"12","C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\components\\Tetris\\useTetrisHooks\\useBoard.js":"13","C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\components\\Tetris\\useTetrisHooks\\index.js":"14","C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\components\\Tetris\\useTetrisHooks\\boardReducer.js":"15","C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\components\\Tetris\\assets\\canHasMovement.js":"16","C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\components\\Tetris\\assets\\transformPc.js":"17","C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\components\\Tetris\\assets\\validateLine.js":"18","C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\components\\Tetris\\assets\\clearLines.js":"19"},{"size":500,"mtime":1606347215642,"results":"20","hashOfConfig":"21"},{"size":362,"mtime":1606347215642,"results":"22","hashOfConfig":"21"},{"size":243,"mtime":1612063295992,"results":"23","hashOfConfig":"21"},{"size":124,"mtime":1612063279349,"results":"24","hashOfConfig":"21"},{"size":442,"mtime":1612065399157,"results":"25","hashOfConfig":"21"},{"size":2425,"mtime":1612839266235,"results":"26","hashOfConfig":"21"},{"size":920,"mtime":1612839505306,"results":"27","hashOfConfig":"21"},{"size":426,"mtime":1612433296266,"results":"28","hashOfConfig":"21"},{"size":256,"mtime":1612068679410,"results":"29","hashOfConfig":"21"},{"size":573,"mtime":1612837878321,"results":"30","hashOfConfig":"21"},{"size":206,"mtime":1612118177526,"results":"31","hashOfConfig":"21"},{"size":891,"mtime":1612121841635,"results":"32","hashOfConfig":"21"},{"size":196,"mtime":1612117209971,"results":"33","hashOfConfig":"21"},{"size":223,"mtime":1612118295758,"results":"34","hashOfConfig":"21"},{"size":3546,"mtime":1612839101353,"results":"35","hashOfConfig":"21"},{"size":3622,"mtime":1612435655557,"results":"36","hashOfConfig":"21"},{"size":333,"mtime":1612436741619,"results":"37","hashOfConfig":"21"},{"size":750,"mtime":1612838241098,"results":"38","hashOfConfig":"21"},{"size":732,"mtime":1612840220034,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"xnd0v6",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\index.js",[],["85","86"],"C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\reportWebVitals.js",[],"C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\App.js",[],"C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\components\\index.js",[],"C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\components\\Header\\Header.js",[],"C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\components\\Tetris\\Tetris.js",["87"],"\r\nimport './styles/_helpers.css'\r\nimport './styles/_tetrisBoard.css'\r\nimport React, { useEffect } from 'react'\r\n\r\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\r\n\r\n// cell style factories\r\n// (stateAssets): renderUI\r\nimport { determineBorder } from './assets/borderFactory.js'\r\nimport { isAPc } from './assets/cellRender.js'\r\n\r\n// line handling\r\nimport { validateLine } from './assets/validateLine.js'\r\nimport { clearLines } from './assets/clearLines.js'\r\n\r\n// tetris state assets\r\nimport {\r\n    useTetris,\r\n    initBoard,\r\n    BOARD_ACTIONS,\r\n    boardReducer,\r\n} from './useTetrisHooks'\r\n\r\nconst { KILL_ACTIVE } = BOARD_ACTIONS\r\n\r\nconst controls = {\r\n    'e': BOARD_ACTIONS.UP,\r\n    'f': BOARD_ACTIONS.RIGHT,\r\n    'd': BOARD_ACTIONS.DOWN,\r\n    's': BOARD_ACTIONS.LEFT,\r\n}\r\n\r\nconst lineActions = {\r\n    'highlight': BOARD_ACTIONS.HIGHLIGHT, \r\n    'update': BOARD_ACTIONS.UPDATE,\r\n}\r\n\r\nfunction Tetris() {\r\n\r\n    const [boardState, dispatchBoard] = useTetris(boardReducer, initBoard)\r\n\r\n    useEffect(() => {\r\n        const lineObj = validateLine(boardState.board, boardState.combo)\r\n        // lineObj: { lines: [...Rows], points }\r\n        \r\n        if (lineObj.lines.size) {\r\n            dispatchBoard({ \r\n                type: lineActions['update'], \r\n                payload: clearLines(boardState.board, lineObj.lines)\r\n            })\r\n            // clearLines: updatedBoard: [...[...], etc]\r\n        }\r\n\r\n    }, [boardState.board])\r\n\r\n    const receiveKeyPress = (key) => {\r\n        // listen for key actions\r\n        dispatchBoard({ type: controls[key] })\r\n    }\r\n\r\nreturn (\r\n<>\r\n<div className='tetris_cont'>\r\n\r\n{\r\nboardState.board.map((row, r_idx) => (\r\n<div className='board_row' key={r_idx}>\r\n    {\r\n        row.map((staticCell, c_idx) => (\r\n\r\n        <div className='board_cell' key={c_idx}\r\n        style={{ \r\n            ...determineBorder(r_idx, c_idx),\r\n            ...isAPc(staticCell, boardState.activePc, [r_idx, c_idx])\r\n        }}\r\n        >\r\n\r\n        </div>\r\n\r\n        ))\r\n    }\r\n</div>\r\n))\r\n}\r\n\r\n{/* key handling */}\r\n<KeyboardEventHandler\r\nhandleKeys={['e', 'f', 'd', 's']}\r\nonKeyEvent={(key, e) => receiveKeyPress(key)} \r\n/>\r\n\r\n{/* helper buttons */}\r\n<div className='helpers_cont'>\r\n    <button \r\n    className='helpers_btn'\r\n    onClick={() => dispatchBoard({type: KILL_ACTIVE})}\r\n    >\r\n    kill active pc\r\n    </button>\r\n</div>\r\n\r\n</div>\r\n</>\r\n)\r\n}\r\n\r\nexport default Tetris\r\n","C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\components\\Tetris\\assets\\emptyBoard.js",[],"C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\components\\Tetris\\assets\\borderFactory.js",[],"C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\components\\Tetris\\assets\\buildInWaiting.js",["88"],"\r\nconst longPc = [\r\n    [0, 3],\r\n    [0, 4],\r\n    [0, 5],\r\n    [0, 6]\r\n]\r\n\r\nconst singlePc = [\r\n    [0, 0]\r\n]\r\n\r\nconst pcs = [\r\n    singlePc\r\n]\r\n\r\nconst buildInWaiting = () => pcs[Math.floor((Math.random() * pcs.length))]\r\n\r\nexport {\r\n    buildInWaiting\r\n}","C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\components\\Tetris\\assets\\cellRender.js",[],"C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\components\\Tetris\\useTetrisHooks\\useTetris.js",[],"C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\components\\Tetris\\useTetrisHooks\\usePcs.js",["89"],"\r\nimport { useEffect } from 'react';\r\n// parent hook\r\nimport { useBoard } from './useBoard'\r\n\r\nimport { BOARD_ACTIONS } from './boardReducer.js'\r\n\r\nconst { PULL_ACTIVE, BUILD_IN_WAITING } = BOARD_ACTIONS\r\n\r\n\r\nexport const usePcs = (reducer, init) => {\r\n    // point at which initialize reducer && assets\r\n    const [boardState, dispatchBoard] = useBoard(reducer, init)\r\n\r\n    useEffect(() => {\r\n        // when active pc falls, kill it\r\n        // this useEffect will handle by pulling active\r\n        if (!boardState.activePc.length) { dispatchBoard({ type: PULL_ACTIVE }) }\r\n        // init case, but also reset case\r\n        if (!boardState.inWaitingPc.length) { dispatchBoard({ type: BUILD_IN_WAITING }) }\r\n    \r\n    }, [boardState])\r\n\r\n    return [\r\n        boardState, \r\n        dispatchBoard, \r\n        /*\r\n        deps: \r\n        just dev buttons for dispatch\r\n        */\r\n    ]\r\n}\r\n","C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\components\\Tetris\\useTetrisHooks\\useBoard.js",[],["90","91"],"C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\components\\Tetris\\useTetrisHooks\\index.js",[],"C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\components\\Tetris\\useTetrisHooks\\boardReducer.js",["92"],"\r\nimport produce from 'immer'\r\nimport { emptyBoard } from '../assets/emptyBoard.js'\r\nimport { buildInWaiting } from '../assets/buildInWaiting.js'\r\nimport { canHasMovement } from '../assets/canHasMovement'\r\nimport { transformPc } from '../assets/transformPc'\r\nimport { clearLines } from '../assets/clearLines'\r\n\r\nconst initBoard = {\r\n    board: emptyBoard,\r\n    // pieces\r\n    activePc: [\r\n        // 0 length activePc === none\r\n    ],\r\n    inWaitingPc: [\r\n        // same as above^^^\r\n    ],\r\n\r\n    combo: 0,\r\n\r\n    points: 0\r\n\r\n}\r\n\r\nconst BOARD_ACTIONS = {\r\n    BUILD_IN_WAITING: 'build_in_waiting',\r\n    PULL_ACTIVE: 'pull_active',\r\n    KILL_ACTIVE: 'kill_active',\r\n\r\n    // keyPress handling\r\n    UP: 'keyPress_up',\r\n    RIGHT: 'keyPress_right',\r\n    DOWN: 'keyPress_down',\r\n    LEFT: 'keyPress_left',\r\n\r\n    // updating board\r\n    HIGHLIGHT: 'highlight_rows', \r\n    UPDATE: 'update_board',\r\n}\r\n\r\nconst {\r\n    // pc handling\r\n    BUILD_IN_WAITING, PULL_ACTIVE, KILL_ACTIVE, \r\n    // keyPress handling\r\n    UP, RIGHT, DOWN, LEFT, \r\n    // updating board\r\n    HIGHLIGHT, UPDATE,\r\n} = BOARD_ACTIONS\r\n\r\nconst boardReducer = (state, { type, payload }) => {\r\n\r\n    switch(type) {\r\n\r\n        case PULL_ACTIVE: \r\n            return produce(state, draft => {\r\n                draft.activePc = draft.inWaitingPc\r\n                draft.inWaitingPc = buildInWaiting()\r\n            })\r\n\r\n        case BUILD_IN_WAITING:\r\n            return produce(state, draft => {\r\n                draft.inWaitingPc = buildInWaiting()\r\n            })\r\n\r\n        case KILL_ACTIVE:\r\n            return produce(state, draft => {\r\n                draft.activePc = []\r\n            })\r\n\r\n        case UP: \r\n            console.log('reg keyPress: UP')\r\n            return state\r\n\r\n        case RIGHT: \r\n            const moveRightObj = canHasMovement(state.board, state.activePc, type)\r\n            console.log('moveRightObj', moveRightObj)\r\n            return produce(state, draft => {\r\n                if (moveRightObj.canHas) {\r\n                    draft.activePc = moveRightObj.pos\r\n                }\r\n            })\r\n\r\n        case DOWN: \r\n            // cases: \r\n            // [0] validate => move()\r\n            const moveDown1Obj = canHasMovement(state.board, state.activePc, type)\r\n            if (moveDown1Obj.canHas) {\r\n                return produce(state, draft => {\r\n                    draft.activePc = moveDown1Obj.pos\r\n                })\r\n\r\n            // [1] transform(board)\r\n            } else {\r\n                return produce(state, draft => {\r\n                    draft.board = transformPc(draft.activePc, draft.board)\r\n                    draft.activePc = []\r\n                    draft.combo = 0\r\n                })\r\n            }\r\n\r\n        case LEFT: \r\n            const moveLeftObj = canHasMovement(state.board, state.activePc, type)\r\n            return produce(state, draft => {\r\n                if (moveLeftObj.canHas) {\r\n                    draft.activePc = moveLeftObj.pos\r\n                }\r\n            })\r\n\r\n        case HIGHLIGHT:\r\n            return produce(state, draft => {\r\n                // payload expects rows set\r\n                payload.lines.forEach(r => {\r\n                    draft.board[r] = new Array(draft.board[0].length).fill(2)\r\n                })\r\n\r\n            })\r\n        \r\n        case UPDATE:\r\n            return produce(state, draft => {\r\n                draft.board = payload\r\n            })\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport {\r\n    initBoard,\r\n    BOARD_ACTIONS,\r\n    boardReducer,\r\n}","C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\components\\Tetris\\assets\\canHasMovement.js",["93"],"\r\nimport produce from 'immer'\r\nconst BOARD_ACTIONS = {\r\n    UP: 'keyPress_up',\r\n    RIGHT: 'keyPress_right',\r\n    DOWN: 'keyPress_down',\r\n    LEFT: 'keyPress_left',\r\n}\r\n\r\nconst {\r\n    UP,\r\n    RIGHT,\r\n    DOWN,\r\n    LEFT,\r\n} = BOARD_ACTIONS\r\n\r\nexport const canHasMovement = (board, activePc, dir) => {\r\n    // receive (board, activePc)\r\n    // if !activePc.lenght return false\r\n    if (!activePc.length) { \r\n        console.log('keyPress: RIGHT. no pc present, preventing movement') \r\n        return { canHas: false, pos: [] } \r\n    }\r\n\r\n    // dir: [UP, RIGHT, DOWN, LEFT] - helper validates against ACTIONS\r\n\r\n    /* reduce to check individual parts, returns: \r\n        expect: moveDown1Obj : {\r\n            canHas: boolean,\r\n            pos: Array(1) [y, x]\r\n            }\r\n    */\r\n\r\n   if (dir === LEFT) {\r\n        return activePc.reduce( (prev, block, idx) => {\r\n            if (!prev.canHas) { return prev }\r\n\r\n            const blockY = block[0]\r\n            const blockX = block[1]\r\n\r\n            // wall collision check\r\n            if (blockX - 1 < 0) {\r\n                return produce(prev, draft => {\r\n                    draft.canHas = false\r\n                    draft.pos = []\r\n                })\r\n            }\r\n            // pc collision check\r\n            else if (board[blockY][blockX-1] === 1) {\r\n                return produce(prev, draft => {\r\n                    draft.canHas = false\r\n                    draft.pos = []\r\n                })\r\n            } else {\r\n                return produce(prev, draft => {\r\n                    draft.pos = [...draft.pos, [blockY, blockX-1]]\r\n                })\r\n            }\r\n\r\n            \r\n        }, { canHas: true, pos: [] })\r\n\r\n    } \r\n\r\n    if (dir === RIGHT) {\r\n        return activePc.reduce( (prev, block, idx) => {\r\n            if (!prev.canHas) { return prev }\r\n\r\n            const blockY = block[0]\r\n            const blockX = block[1]\r\n            // wall collision check\r\n            if (blockX + 1 >= board[0].length) {\r\n                return produce(prev, draft => {\r\n                    draft.canHas = false\r\n                    draft.pos = []\r\n                })\r\n            }\r\n            // pc collision check\r\n            else if (board[blockY][blockX+1] === 1) {\r\n                return produce(prev, draft => {\r\n                    draft.canHas = false\r\n                    draft.pos = []\r\n                })\r\n            } else {\r\n                return produce(prev, draft => {\r\n                    draft.pos = [...draft.pos, [blockY, blockX+1]]\r\n                })\r\n            }\r\n\r\n            \r\n        }, { canHas: true, pos: [] })\r\n\r\n    } \r\n    \r\n    if (dir === DOWN) {\r\n        return activePc.reduce( (prev, block, idx) => {\r\n            if (!prev.canHas) { return prev }\r\n\r\n            const blockY = block[0]\r\n            const blockX = block[1]\r\n\r\n            // floor collision check\r\n            if (blockY + 1 >= board.length) {\r\n                return produce(prev, draft => {\r\n                    draft.canHas = false\r\n                    draft.pos = []\r\n                })\r\n\r\n            // staticPc collision check\r\n            } else if (board[blockY+1][blockX] === 1) {\r\n\r\n                return produce(prev, draft => {\r\n                    draft.canHas = false\r\n                    draft.pos = []\r\n                })\r\n\r\n            // render pc next pos returned with next acc/prev\r\n            } else {\r\n                return produce(prev, draft => {\r\n                    draft.pos = [...draft.pos, [blockY+1, blockX]]\r\n                })\r\n            }\r\n\r\n        }, { canHas: true, pos: [] })\r\n\r\n    }\r\n\r\n}","C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\components\\Tetris\\assets\\transformPc.js",[],"C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\components\\Tetris\\assets\\validateLine.js",[],"C:\\Users\\Hui\\desktop\\myProjs\\tetris\\src\\components\\Tetris\\assets\\clearLines.js",[],{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":55,"column":8,"nodeType":"100","endLine":55,"endColumn":26,"suggestions":"101"},{"ruleId":"102","severity":1,"message":"103","line":2,"column":7,"nodeType":"104","messageId":"105","endLine":2,"endColumn":13},{"ruleId":"98","severity":1,"message":"106","line":22,"column":8,"nodeType":"100","endLine":22,"endColumn":20,"suggestions":"107"},{"ruleId":"94","replacedBy":"108"},{"ruleId":"96","replacedBy":"109"},{"ruleId":"102","severity":1,"message":"110","line":7,"column":10,"nodeType":"104","messageId":"105","endLine":7,"endColumn":20},{"ruleId":"102","severity":1,"message":"111","line":11,"column":5,"nodeType":"104","messageId":"105","endLine":11,"endColumn":7},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'boardState.combo' and 'dispatchBoard'. Either include them or remove the dependency array.","ArrayExpression",["114"],"no-unused-vars","'longPc' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'dispatchBoard'. Either include it or remove the dependency array.",["115"],["112"],["113"],"'clearLines' is defined but never used.","'UP' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},"Update the dependencies array to be: [boardState.board, boardState.combo, dispatchBoard]",{"range":"120","text":"121"},"Update the dependencies array to be: [boardState, dispatchBoard]",{"range":"122","text":"123"},[1438,1456],"[boardState.board, boardState.combo, dispatchBoard]",[724,736],"[boardState, dispatchBoard]"]