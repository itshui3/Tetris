[{"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\index.js":"1","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\App.js":"2","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\reportWebVitals.js":"3","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\index.js":"4","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\Tetris.js":"5","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Header\\Header.js":"6","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\borderFactory.js":"7","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\cellRender.js":"8","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\validateLine.js":"9","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\clearLines.js":"10","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\useTetrisHooks\\index.js":"11","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\useTetrisHooks\\useTetris.js":"12","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\useTetrisHooks\\boardReducer.js":"13","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\emptyBoard.js":"14","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\buildPc.js":"15","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\useTetrisHooks\\usePcs.js":"16","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\canHasMovement.js":"17","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\transformPc.js":"18","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\canHasRotation.js":"19","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\useTetrisHooks\\useBoard.js":"20"},{"size":517,"mtime":1616005163404,"results":"21","hashOfConfig":"22"},{"size":265,"mtime":1616005163371,"results":"23","hashOfConfig":"22"},{"size":375,"mtime":1616005163407,"results":"24","hashOfConfig":"22"},{"size":124,"mtime":1616005163402,"results":"25","hashOfConfig":"22"},{"size":3573,"mtime":1616011442961,"results":"26","hashOfConfig":"22"},{"size":442,"mtime":1616005163377,"results":"27","hashOfConfig":"22"},{"size":426,"mtime":1616005163381,"results":"28","hashOfConfig":"22"},{"size":868,"mtime":1616005163387,"results":"29","hashOfConfig":"22"},{"size":811,"mtime":1616011380419,"results":"30","hashOfConfig":"22"},{"size":657,"mtime":1616011412281,"results":"31","hashOfConfig":"22"},{"size":223,"mtime":1616005163397,"results":"32","hashOfConfig":"22"},{"size":206,"mtime":1616005163401,"results":"33","hashOfConfig":"22"},{"size":4029,"mtime":1616012197675,"results":"34","hashOfConfig":"22"},{"size":920,"mtime":1616005163389,"results":"35","hashOfConfig":"22"},{"size":1976,"mtime":1616005163382,"results":"36","hashOfConfig":"22"},{"size":809,"mtime":1616005163399,"results":"37","hashOfConfig":"22"},{"size":3306,"mtime":1616005163384,"results":"38","hashOfConfig":"22"},{"size":590,"mtime":1616012093778,"results":"39","hashOfConfig":"22"},{"size":1360,"mtime":1616005163385,"results":"40","hashOfConfig":"22"},{"size":196,"mtime":1616005163398,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1rtkkq9",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\index.js",[],["87","88"],"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\App.js",[],"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\reportWebVitals.js",[],"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\index.js",[],"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\Tetris.js",["89"],"\r\nimport './styles/_helpers.css'\r\nimport './styles/_tetrisBoard.css'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\n\r\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\r\n\r\n// cell style factories\r\n// (stateAssets): renderUI\r\nimport { determineBorder } from './assets/borderFactory.js'\r\nimport { isAPc } from './assets/cellRender.js'\r\n\r\n// line handling\r\nimport { validateLine } from './assets/validateLine.js'\r\nimport { clearLines } from './assets/clearLines.js'\r\n\r\n// tetris state assets\r\nimport {\r\n    useTetris,\r\n    initBoard,\r\n    BOARD_ACTIONS,\r\n    boardReducer,\r\n} from './useTetrisHooks'\r\n\r\nconst { KILL_ACTIVE } = BOARD_ACTIONS\r\n\r\nconst controls = {\r\n    'f': BOARD_ACTIONS.RIGHT,\r\n    'd': BOARD_ACTIONS.DOWN,\r\n    's': BOARD_ACTIONS.LEFT,\r\n\r\n    'r': BOARD_ACTIONS.CW,\r\n    'w': BOARD_ACTIONS.CCW,\r\n}\r\n\r\nconst lineActions = {\r\n    // 'highlight': BOARD_ACTIONS.HIGHLIGHT, \r\n    'update': BOARD_ACTIONS.UPDATE,\r\n}\r\n\r\nfunction Tetris() {\r\n\r\n    const startGameButtonBlurRef = useRef()\r\n    const killActiveButtonBlurRef = useRef()\r\n\r\n    const [boardState, dispatchBoard] = useTetris(boardReducer, initBoard)\r\n    const [dropInt, setDropInt] = useState(null)\r\n\r\n// dropInterval\r\nuseEffect(() => {\r\n\r\nif (boardState.gameActive) {\r\n    console.log('init drop interval')\r\n    setDropInt( setInterval(() => {\r\n        console.log('reiterating dropInterval')\r\n        dispatchBoard({ type: BOARD_ACTIONS.DOWN })\r\n    }, 500) )\r\n\r\n} else {\r\n    if (dropInt) {\r\n        setDropInt(null)\r\n        clearInterval(dropInt)\r\n    }\r\n}\r\n\r\nreturn clearInterval(dropInt)\r\n    \r\n}, [boardState.gameActive])\r\n\r\n    useEffect(() => {\r\n\r\n        if (boardState.board[0].find((block) => block > 0)) {\r\n            dispatchBoard({ type: BOARD_ACTIONS.END })\r\n        }\r\n\r\n        const lineObj = validateLine(boardState.board)\r\n        // lineObj: { lines: [...Rows], points }\r\n        \r\n        if (lineObj.lines.length) {\r\n            dispatchBoard({ \r\n                type: lineActions['update'], \r\n                payload: clearLines(boardState.board, lineObj.lines)\r\n            })\r\n            // clearLines: updatedBoard: [...[...], etc]\r\n        }\r\n\r\n    }, [boardState.board, dispatchBoard])\r\n\r\n    const receiveKeyPress = (key) => {\r\n        // listen for key actions\r\n        if (boardState.gameActive) {\r\n            dispatchBoard({ type: controls[key] })\r\n        }\r\n\r\n    }\r\n\r\nreturn (\r\n<>\r\n<div className='tetris_cont'>\r\n\r\n{\r\nboardState.board.map((row, r_idx) => (\r\n<div className='board_row' key={r_idx}>\r\n    {\r\n        row.map((staticCell, c_idx) => (\r\n\r\n        <div className='board_cell' key={c_idx}\r\n        style={{ \r\n            ...determineBorder(r_idx, c_idx),\r\n            ...isAPc(staticCell, boardState.activePc, [r_idx, c_idx])\r\n        }}\r\n        >\r\n\r\n        </div>\r\n\r\n        ))\r\n    }\r\n</div>\r\n))\r\n}\r\n\r\n{/* helper buttons */}\r\n<div className='helpers_cont'>\r\n    <button className='helpers_btn' ref={startGameButtonBlurRef}\r\n    onClick={() => {\r\n        dispatchBoard({type: BOARD_ACTIONS.START})\r\n        startGameButtonBlurRef.current.blur()\r\n    }}\r\n    >\r\n        Start Game\r\n    </button>\r\n    <button className='helpers_btn' ref={killActiveButtonBlurRef}\r\n    onClick={() => {\r\n        dispatchBoard({type: KILL_ACTIVE})\r\n        killActiveButtonBlurRef.current.blur()\r\n    }}\r\n    >\r\n    kill active pc\r\n    </button>\r\n</div>\r\n\r\n{/* key handling */}\r\n<KeyboardEventHandler\r\nhandleKeys={['f', 'd', 's', 'r', 'w']}\r\nonKeyEvent={(key, e) => receiveKeyPress(key)} \r\n/>\r\n\r\n\r\n</div>\r\n</>\r\n)\r\n}\r\n\r\nexport default Tetris\r\n","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Header\\Header.js",[],"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\borderFactory.js",[],"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\cellRender.js",[],"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\validateLine.js",[],"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\clearLines.js",[],"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\useTetrisHooks\\index.js",[],"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\useTetrisHooks\\useTetris.js",[],"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\useTetrisHooks\\boardReducer.js",["90"],"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\emptyBoard.js",[],"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\buildPc.js",[],"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\useTetrisHooks\\usePcs.js",["91"],"\r\nimport { useEffect } from 'react';\r\n// parent hook\r\nimport { useBoard } from './useBoard'\r\n\r\nimport { BOARD_ACTIONS } from './boardReducer.js'\r\n\r\nconst { PULL_ACTIVE } = BOARD_ACTIONS\r\n\r\n\r\nexport const usePcs = (reducer, init) => {\r\n    // point at which initialize reducer && assets\r\n    const [boardState, dispatchBoard] = useBoard(reducer, init)\r\n\r\n    useEffect(() => {\r\n        // when active pc falls, kill it\r\n        // this useEffect will handle by pulling active\r\n        if (!Object.keys(boardState.activePc).length && boardState.gameActive) { dispatchBoard({ type: PULL_ACTIVE }) }\r\n    \r\n    }, [boardState.activePc, boardState.gameActive])\r\n\r\n    return [\r\n        boardState, \r\n        dispatchBoard, \r\n        /*\r\n        deps: \r\n        just dev buttons for dispatch\r\n        */\r\n    ]\r\n}\r\n","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\canHasMovement.js",["92"],"\r\nimport produce from 'immer'\r\nconst BOARD_ACTIONS = {\r\n    UP: 'keyPress_up',\r\n    RIGHT: 'keyPress_right',\r\n    DOWN: 'keyPress_down',\r\n    LEFT: 'keyPress_left',\r\n}\r\n\r\nconst {\r\n    UP,\r\n    RIGHT,\r\n    DOWN,\r\n    LEFT,\r\n} = BOARD_ACTIONS\r\n\r\nexport const canHasMovement = (board, activePc, dir) => {\r\n    // receive (board, activePc)\r\n    // if !activePc.lenght return false\r\n    if (!Object.keys(activePc).length) { \r\n        console.log('keyPress: RIGHT. no pc present, preventing movement') \r\n        return { canHas: false, pos: [] } \r\n    }\r\n\r\n    // dir: [UP, RIGHT, DOWN, LEFT] - helper validates against ACTIONS\r\n\r\n    const pivot = activePc.pivot\r\n    const curForm = activePc.forms[activePc.form]\r\n\r\n    const formsPositioned = [pivot, ...curForm.map((point, idx) => {\r\n        return [point[0] + pivot[0], point[1] + pivot[1]]\r\n    })]\r\n\r\n\r\n    if (dir === LEFT) {\r\n\r\n            return formsPositioned.reduce( (prev, block, idx) => {\r\n                if (!prev.canHas) { return prev }\r\n\r\n                const blockY = block[0]\r\n                const blockX = block[1]\r\n\r\n                // wall collision check\r\n                if (blockX - 1 < 0) {\r\n                    return produce(prev, draft => {\r\n                        draft.canHas = false\r\n                        draft.pos = []\r\n                    })\r\n                }\r\n                // pc collision check\r\n                else if (board[blockY][blockX-1] === 1) {\r\n                    return produce(prev, draft => {\r\n                        draft.canHas = false\r\n                        draft.pos = []\r\n                    })\r\n                } else { return prev }\r\n                \r\n            }, { canHas: true, pos: [pivot[0], pivot[1]-1] })\r\n\r\n        } \r\n\r\n    if (dir === RIGHT) {\r\n\r\n        return formsPositioned.reduce( (prev, block, idx) => {\r\n            if (!prev.canHas) { return prev }\r\n\r\n            const blockY = block[0]\r\n            const blockX = block[1]\r\n            // wall collision check\r\n            if (blockX + 1 >= board[0].length) {\r\n                return produce(prev, draft => {\r\n                    draft.canHas = false\r\n                    draft.pos = []\r\n                })\r\n            }\r\n            // pc collision check\r\n            else if (board[blockY][blockX+1] === 1) {\r\n                return produce(prev, draft => {\r\n                    draft.canHas = false\r\n                    draft.pos = []\r\n                })\r\n            } else { return prev }\r\n\r\n            \r\n        }, { canHas: true, pos: [pivot[0], pivot[1]+1] })\r\n\r\n    } \r\n\r\n    if (dir === DOWN) {\r\n\r\n        return formsPositioned.reduce( (prev, block, idx) => {\r\n            if (!prev.canHas) { return prev }\r\n\r\n            const blockY = block[0]\r\n            const blockX = block[1]\r\n\r\n            // floor collision check\r\n            if (blockY + 1 >= board.length) {\r\n                return produce(prev, draft => {\r\n                    draft.canHas = false\r\n                })\r\n\r\n            // staticPc collision check\r\n            } else if (board[blockY+1][blockX] === 1) {\r\n\r\n                return produce(prev, draft => {\r\n                    draft.canHas = false\r\n                })\r\n\r\n            } else { return prev }\r\n\r\n        }, { canHas: true, pos: [pivot[0]+1, pivot[1]] })\r\n\r\n    }\r\n\r\n}","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\transformPc.js",[],"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\canHasRotation.js",["93"],"\r\nimport produce from 'immer'\r\n\r\nconst ROTATE = {\r\n    CW: 'rotate_cw', // expect shift form index to right\r\n    CCW: 'rotate_ccw', // expect shift form index to left\r\n}\r\nconst { CW, CCW } = ROTATE;\r\n\r\nconst canHasRotation = (board, activePc, dir) => {\r\n\r\nconst prevForm = activePc.form;\r\nlet nextForm;\r\n\r\nif(CW === dir) {\r\n    console.log('validate CW')\r\n    nextForm = activePc.form === activePc.forms.length-1 ? 0 : activePc.form+1;\r\n    \r\n}\r\n\r\nif(CCW === dir) {\r\n    console.log('validate CCW')\r\n    nextForm = activePc.form === 0 ? activePc.forms.length-1 : activePc.form-1;\r\n}\r\n    let pivot = activePc.pivot\r\n\r\n    const builtForm = [activePc.pivot, ...activePc.forms[nextForm].map((block, idx) => {\r\n        return [block[0] + pivot[0], block[1] + pivot[1]]\r\n    })]\r\n\r\n    console.log('builtForm', builtForm);\r\n\r\n    const canHasRotate = builtForm.reduce((prev, block) => {\r\n        if (!prev) { return prev }\r\n        // check wall\r\n        if (block[0] < 0 || block[0] >= board.length) { \r\n            return false }\r\n        if (block[1] < 0 || block[1] >= board[0].length) { \r\n            return false }\r\n\r\n        // check static\r\n        if (board[block[0]][block[1]]) { \r\n            return false }\r\n\r\n        return prev\r\n    }, true)\r\n\r\n    return { form: canHasRotate ? nextForm : prevForm }\r\n} // canHasRotation\r\n\r\nexport { canHasRotation }","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\useTetrisHooks\\useBoard.js",[],{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":68,"column":4,"nodeType":"100","endLine":68,"endColumn":27,"suggestions":"101"},{"ruleId":"102","severity":1,"message":"103","line":106,"column":9,"nodeType":"104","messageId":"105","endLine":112,"endColumn":15},{"ruleId":"98","severity":1,"message":"106","line":20,"column":8,"nodeType":"100","endLine":20,"endColumn":52,"suggestions":"107"},{"ruleId":"108","severity":1,"message":"109","line":11,"column":5,"nodeType":"110","messageId":"111","endLine":11,"endColumn":7},{"ruleId":"108","severity":1,"message":"112","line":2,"column":8,"nodeType":"110","messageId":"111","endLine":2,"endColumn":15},"no-native-reassign",["113"],"no-negated-in-lhs",["114"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatchBoard' and 'dropInt'. Either include them or remove the dependency array.","ArrayExpression",["115"],"no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","React Hook useEffect has a missing dependency: 'dispatchBoard'. Either include it or remove the dependency array.",["116"],"no-unused-vars","'UP' is assigned a value but never used.","Identifier","unusedVar","'produce' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},"Update the dependencies array to be: [boardState.gameActive, dispatchBoard, dropInt]",{"range":"121","text":"122"},"Update the dependencies array to be: [boardState.activePc, boardState.gameActive, dispatchBoard]",{"range":"123","text":"124"},[1603,1626],"[boardState.gameActive, dispatchBoard, dropInt]",[610,654],"[boardState.activePc, boardState.gameActive, dispatchBoard]"]