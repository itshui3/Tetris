[{"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\index.js":"1","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\App.js":"2","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\reportWebVitals.js":"3","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\index.js":"4","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\Tetris.js":"5","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Header\\Header.js":"6","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\borderFactory.js":"7","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\cellRender.js":"8","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\validateLine.js":"9","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\clearLines.js":"10","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\useTetrisHooks\\index.js":"11","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\useTetrisHooks\\useTetris.js":"12","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\useTetrisHooks\\boardReducer.js":"13","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\emptyBoard.js":"14","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\buildPc.js":"15","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\useTetrisHooks\\usePcs.js":"16","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\canHasMovement.js":"17","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\transformPc.js":"18","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\canHasRotation.js":"19","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\useTetrisHooks\\useBoard.js":"20","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\Dummy.js":"21","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\lineBoard.js":"22"},{"size":517,"mtime":1624215584260,"results":"23","hashOfConfig":"24"},{"size":524,"mtime":1625793998097,"results":"25","hashOfConfig":"24"},{"size":375,"mtime":1624215584263,"results":"26","hashOfConfig":"24"},{"size":124,"mtime":1624215584256,"results":"27","hashOfConfig":"24"},{"size":4830,"mtime":1625792625810,"results":"28","hashOfConfig":"24"},{"size":480,"mtime":1624216424687,"results":"29","hashOfConfig":"24"},{"size":426,"mtime":1624215584228,"results":"30","hashOfConfig":"24"},{"size":868,"mtime":1624215584234,"results":"31","hashOfConfig":"24"},{"size":811,"mtime":1624215584242,"results":"32","hashOfConfig":"24"},{"size":609,"mtime":1624215584236,"results":"33","hashOfConfig":"24"},{"size":323,"mtime":1625435637487,"results":"34","hashOfConfig":"24"},{"size":208,"mtime":1624291737492,"results":"35","hashOfConfig":"24"},{"size":4403,"mtime":1625880683729,"results":"36","hashOfConfig":"24"},{"size":921,"mtime":1625791322247,"results":"37","hashOfConfig":"24"},{"size":2251,"mtime":1625647513137,"results":"38","hashOfConfig":"24"},{"size":814,"mtime":1625793288634,"results":"39","hashOfConfig":"24"},{"size":3306,"mtime":1624215584231,"results":"40","hashOfConfig":"24"},{"size":522,"mtime":1625880627968,"results":"41","hashOfConfig":"24"},{"size":1261,"mtime":1625788716608,"results":"42","hashOfConfig":"24"},{"size":200,"mtime":1624291765819,"results":"43","hashOfConfig":"24"},{"size":175,"mtime":1624919406101,"results":"44","hashOfConfig":"45"},{"size":934,"mtime":1625791953277,"results":"46","hashOfConfig":"24"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"c5xh1h",{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"49"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"49"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"49"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},"1rtkkq9",{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\index.js",[],["96","97"],"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\App.js",["98","99","100"],"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\reportWebVitals.js",[],"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\index.js",[],"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\Tetris.js",["101","102"],"\r\nimport './styles/_helpers.css';\r\nimport './styles/_tetrisBoard.css';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\n\r\n// outside components\r\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\r\n\r\n// cell style factories\r\n// (stateAssets): renderUI\r\nimport { determineBorder } from './assets/borderFactory.js';\r\nimport { isAPc } from './assets/cellRender.js';\r\n\r\n// line handling\r\nimport { validateLine } from './assets/validateLine.js';\r\nimport { clearLines } from './assets/clearLines.js';\r\n\r\n// tetris state assets\r\nimport {\r\n    useTetris,\r\n    // initBoard,\r\n    BOARD_ACTIONS,\r\n    boardReducer,\r\n} from './useTetrisHooks';\r\n\r\nconst { KILL_ACTIVE } = BOARD_ACTIONS;\r\n\r\nconst controls = {\r\n    'f': BOARD_ACTIONS.RIGHT,\r\n    'd': BOARD_ACTIONS.DOWN,\r\n    's': BOARD_ACTIONS.LEFT,\r\n\r\n    'r': BOARD_ACTIONS.CW,\r\n    'w': BOARD_ACTIONS.CCW,\r\n};\r\n\r\nconst lineActions = {\r\n    // 'highlight': BOARD_ACTIONS.HIGHLIGHT, \r\n    'update': BOARD_ACTIONS.UPDATE,\r\n};\r\n\r\nfunction Tetris({ initBoard }) {\r\n\r\n    const startGameButtonBlurRef = useRef();\r\n    const killActiveButtonBlurRef = useRef();\r\n\r\n    const [boardState, dispatchBoard] = useTetris(boardReducer, initBoard);\r\n    const [dropInt, setDropInt] = useState(null);\r\n\r\n    // dropInterval\r\n    useEffect(() => {\r\n\r\n    if (boardState.gameActive) {\r\n\r\n        setDropInt( setInterval(() => {\r\n\r\n            dispatchBoard({ type: BOARD_ACTIONS.DOWN });\r\n        }, 500) );\r\n\r\n    } else {\r\n        if (dropInt) {\r\n            setDropInt(null);\r\n            clearInterval(dropInt);\r\n        }\r\n    }\r\n\r\n    return () => clearInterval(dropInt);\r\n        \r\n    }, [boardState.gameActive]);\r\n\r\n    useEffect(() => {\r\n        // why is game not ending? \r\n        if (boardState.board[0].find((block) => block > 0)) {\r\n            dispatchBoard({ type: BOARD_ACTIONS.END });\r\n        }\r\n\r\n        const lineObj = validateLine(boardState.board);\r\n        // lineObj: { lines: [...Rows], points }\r\n        \r\n        if (lineObj.lines.length) {\r\n            dispatchBoard({ \r\n                type: lineActions['update'], \r\n                payload: clearLines(boardState.board, lineObj.lines)\r\n            });\r\n            // clearLines: updatedBoard: [...[...], etc]\r\n        }\r\n\r\n    }, [boardState.board]);\r\n\r\n    const receiveKeyPress = (key) => {\r\n        // listen for key actions\r\n        if (boardState.gameActive) {\r\n            dispatchBoard({ type: controls[key] });\r\n        }\r\n\r\n    }\r\n\r\nreturn (\r\n<>\r\n    <div className='tetris_cont' data-testid='tetris_cont'>\r\n\r\n    {\r\n    boardState.board.map((row, r_idx) => (\r\n    <div className='board_row' key={r_idx}>\r\n        {\r\n            row.map((staticCell, c_idx) => (\r\n\r\n            <div className='board_cell' key={c_idx}\r\n            style={{ \r\n                ...determineBorder(r_idx, c_idx),\r\n                ...isAPc(staticCell, boardState.activePc, [r_idx, c_idx])\r\n            }}\r\n            >\r\n\r\n            </div>\r\n\r\n            ))\r\n        }\r\n    </div>\r\n    ))\r\n    }\r\n    </div>\r\n    <div className='controllers_cont'>\r\n        {/* dummy controls */}\r\n        <div className='helpers_cont'>\r\n\r\n        <button data-testid='control_ccw'\r\n        onClick={() => receiveKeyPress('w')}\r\n        >ccw</button>\r\n        <button data-testid='control_cw'\r\n        onClick={() => receiveKeyPress('r')}\r\n        >cw</button>\r\n\r\n        </div>\r\n\r\n        <div className='helpers_cont'>\r\n\r\n        <button data-testid='control_left'\r\n        onClick={() => receiveKeyPress('s')}\r\n        >left</button>\r\n        <button data-testid='control_down'\r\n        onClick={() => receiveKeyPress('d')}\r\n        >down</button>\r\n        <button data-testid='control_right'\r\n        onClick={() => receiveKeyPress('f')}\r\n        >right</button>\r\n\r\n        </div>\r\n\r\n        {/* helper buttons */}\r\n        <div className='helpers_cont'>\r\n        <button className='helpers_btn' ref={startGameButtonBlurRef} data-testid='startGame'\r\n        onClick={() => {\r\n            dispatchBoard({type: BOARD_ACTIONS.START});\r\n            startGameButtonBlurRef.current.blur();\r\n        }}\r\n        >\r\n            Start Game\r\n        </button>\r\n        <button className='helpers_btn' ref={killActiveButtonBlurRef} data-testid='killActive'\r\n        onClick={() => {\r\n            dispatchBoard({type: KILL_ACTIVE});\r\n            killActiveButtonBlurRef.current.blur();\r\n        }}\r\n        >\r\n        kill active pc\r\n        </button>\r\n        </div>\r\n\r\n        {/* \r\n        key handling \r\n        KeyboardEventHandler - might not be super accessible as is seen from tests\r\n        */}\r\n\r\n        <KeyboardEventHandler\r\n        handleKeys={['f', 'd', 's', 'r', 'w']}\r\n        handleEventType='keydown'\r\n        onKeyEvent={(key, e) => receiveKeyPress(key)}\r\n        />\r\n    </div>\r\n</>\r\n)\r\n}\r\n\r\nexport default Tetris;","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Header\\Header.js",[],"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\borderFactory.js",[],"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\cellRender.js",[],"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\validateLine.js",[],"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\clearLines.js",[],"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\useTetrisHooks\\index.js",[],"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\useTetrisHooks\\useTetris.js",[],"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\useTetrisHooks\\boardReducer.js",["103"],"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\emptyBoard.js",[],"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\buildPc.js",[],"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\useTetrisHooks\\usePcs.js",["104"],"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\canHasMovement.js",["105"],"\r\nimport produce from 'immer'\r\nconst BOARD_ACTIONS = {\r\n    UP: 'keyPress_up',\r\n    RIGHT: 'keyPress_right',\r\n    DOWN: 'keyPress_down',\r\n    LEFT: 'keyPress_left',\r\n}\r\n\r\nconst {\r\n    UP,\r\n    RIGHT,\r\n    DOWN,\r\n    LEFT,\r\n} = BOARD_ACTIONS\r\n\r\nexport const canHasMovement = (board, activePc, dir) => {\r\n    // receive (board, activePc)\r\n    // if !activePc.lenght return false\r\n    if (!Object.keys(activePc).length) { \r\n        console.log('keyPress: RIGHT. no pc present, preventing movement') \r\n        return { canHas: false, pos: [] } \r\n    }\r\n\r\n    // dir: [UP, RIGHT, DOWN, LEFT] - helper validates against ACTIONS\r\n\r\n    const pivot = activePc.pivot\r\n    const curForm = activePc.forms[activePc.form]\r\n\r\n    const formsPositioned = [pivot, ...curForm.map((point, idx) => {\r\n        return [point[0] + pivot[0], point[1] + pivot[1]]\r\n    })]\r\n\r\n\r\n    if (dir === LEFT) {\r\n\r\n            return formsPositioned.reduce( (prev, block, idx) => {\r\n                if (!prev.canHas) { return prev }\r\n\r\n                const blockY = block[0]\r\n                const blockX = block[1]\r\n\r\n                // wall collision check\r\n                if (blockX - 1 < 0) {\r\n                    return produce(prev, draft => {\r\n                        draft.canHas = false\r\n                        draft.pos = []\r\n                    })\r\n                }\r\n                // pc collision check\r\n                else if (board[blockY][blockX-1] === 1) {\r\n                    return produce(prev, draft => {\r\n                        draft.canHas = false\r\n                        draft.pos = []\r\n                    })\r\n                } else { return prev }\r\n                \r\n            }, { canHas: true, pos: [pivot[0], pivot[1]-1] })\r\n\r\n        } \r\n\r\n    if (dir === RIGHT) {\r\n\r\n        return formsPositioned.reduce( (prev, block, idx) => {\r\n            if (!prev.canHas) { return prev }\r\n\r\n            const blockY = block[0]\r\n            const blockX = block[1]\r\n            // wall collision check\r\n            if (blockX + 1 >= board[0].length) {\r\n                return produce(prev, draft => {\r\n                    draft.canHas = false\r\n                    draft.pos = []\r\n                })\r\n            }\r\n            // pc collision check\r\n            else if (board[blockY][blockX+1] === 1) {\r\n                return produce(prev, draft => {\r\n                    draft.canHas = false\r\n                    draft.pos = []\r\n                })\r\n            } else { return prev }\r\n\r\n            \r\n        }, { canHas: true, pos: [pivot[0], pivot[1]+1] })\r\n\r\n    } \r\n\r\n    if (dir === DOWN) {\r\n\r\n        return formsPositioned.reduce( (prev, block, idx) => {\r\n            if (!prev.canHas) { return prev }\r\n\r\n            const blockY = block[0]\r\n            const blockX = block[1]\r\n\r\n            // floor collision check\r\n            if (blockY + 1 >= board.length) {\r\n                return produce(prev, draft => {\r\n                    draft.canHas = false\r\n                })\r\n\r\n            // staticPc collision check\r\n            } else if (board[blockY+1][blockX] === 1) {\r\n\r\n                return produce(prev, draft => {\r\n                    draft.canHas = false\r\n                })\r\n\r\n            } else { return prev }\r\n\r\n        }, { canHas: true, pos: [pivot[0]+1, pivot[1]] })\r\n\r\n    }\r\n\r\n}","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\transformPc.js",[],"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\canHasRotation.js",["106"],"\r\nimport produce from 'immer';\r\n\r\nconst ROTATE = {\r\n    CW: 'rotate_cw', // expect shift form index to right\r\n    CCW: 'rotate_ccw', // expect shift form index to left\r\n};\r\n\r\nconst { CW, CCW } = ROTATE;\r\n\r\nconst canHasRotation = (board, activePc, dir) => {\r\n\r\nconst prevForm = activePc.form;\r\nlet nextForm;\r\n\r\nif (CW === dir) {\r\n    nextForm = activePc.form === activePc.forms.length-1 ? 0 : activePc.form+1;\r\n    \r\n}\r\n\r\nif (CCW === dir) {\r\n    nextForm = activePc.form === 0 ? activePc.forms.length-1 : activePc.form-1;\r\n}\r\n    let pivot = activePc.pivot;\r\n\r\n    const builtForm = [activePc.pivot, ...activePc.forms[nextForm].map((block, idx) => {\r\n        return [block[0] + pivot[0], block[1] + pivot[1]];\r\n    })];\r\n\r\n    const canHasRotate = builtForm.reduce((prev, block) => {\r\n        if (!prev) { return prev }\r\n        // check wall\r\n        if (block[0] < 0 || block[0] >= board.length) { \r\n            return false }\r\n        if (block[1] < 0 || block[1] >= board[0].length) { \r\n            return false }\r\n\r\n        // check static\r\n        if (board[block[0]][block[1]]) { \r\n            return false }\r\n\r\n        return prev\r\n    }, true)\r\n\r\n    return { form: canHasRotate ? nextForm : prevForm }\r\n} // canHasRotation\r\n\r\nexport { canHasRotation };","C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\useTetrisHooks\\useBoard.js",[],"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\Dummy.js",[],["107","108"],"C:\\Users\\Hui\\desktop\\prog\\myProjs\\tetris\\src\\components\\Tetris\\assets\\lineBoard.js",[],{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":2,"column":17,"nodeType":"115","messageId":"116","endLine":2,"endColumn":26},{"ruleId":"113","severity":1,"message":"117","line":11,"column":25,"nodeType":"115","messageId":"116","endLine":11,"endColumn":33},{"ruleId":"113","severity":1,"message":"118","line":14,"column":10,"nodeType":"115","messageId":"116","endLine":14,"endColumn":19},{"ruleId":"119","severity":1,"message":"120","line":69,"column":8,"nodeType":"121","endLine":69,"endColumn":31,"suggestions":"122"},{"ruleId":"119","severity":1,"message":"123","line":88,"column":8,"nodeType":"121","endLine":88,"endColumn":26,"suggestions":"124"},{"ruleId":"113","severity":1,"message":"125","line":4,"column":26,"nodeType":"115","messageId":"116","endLine":4,"endColumn":33},{"ruleId":"119","severity":1,"message":"123","line":20,"column":8,"nodeType":"121","endLine":20,"endColumn":52,"suggestions":"126"},{"ruleId":"113","severity":1,"message":"127","line":11,"column":5,"nodeType":"115","messageId":"116","endLine":11,"endColumn":7},{"ruleId":"113","severity":1,"message":"128","line":2,"column":8,"nodeType":"115","messageId":"116","endLine":2,"endColumn":15},{"ruleId":"109","replacedBy":"129"},{"ruleId":"111","replacedBy":"130"},"no-native-reassign",["131"],"no-negated-in-lhs",["132"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'dummyPcs' is defined but never used.","'lineBoard' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatchBoard' and 'dropInt'. Either include them or remove the dependency array.","ArrayExpression",["133"],"React Hook useEffect has a missing dependency: 'dispatchBoard'. Either include it or remove the dependency array.",["134"],"'gamePcs' is defined but never used.",["135"],"'UP' is assigned a value but never used.","'produce' is defined but never used.",["131"],["132"],"no-global-assign","no-unsafe-negation",{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},"Update the dependencies array to be: [boardState.gameActive, dispatchBoard, dropInt]",{"range":"142","text":"143"},"Update the dependencies array to be: [boardState.board, dispatchBoard]",{"range":"144","text":"145"},"Update the dependencies array to be: [boardState.activePc, boardState.gameActive, dispatchBoard]",{"range":"146","text":"147"},[1644,1667],"[boardState.gameActive, dispatchBoard, dropInt]",[2262,2280],"[boardState.board, dispatchBoard]",[614,658],"[boardState.activePc, boardState.gameActive, dispatchBoard]"]